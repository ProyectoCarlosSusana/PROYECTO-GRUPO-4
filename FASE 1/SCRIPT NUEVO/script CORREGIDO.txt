-- Generado por Oracle SQL Developer Data Modeler 4.1.1.888
--   en:        2017-04-06 18:00:20 CEST
--   sitio:      Oracle Database 12c
--   tipo:      Oracle Database 12c




DROP TABLE Avisos CASCADE CONSTRAINTS ;

DROP TABLE CENTRO CASCADE CONSTRAINTS ;

DROP TABLE PARTE CASCADE CONSTRAINTS ;

DROP TABLE TRABAJADOR CASCADE CONSTRAINTS ;

DROP TABLE VEHICULO CASCADE CONSTRAINTS ;

DROP TABLE VEHICULO_RELACION__TRABAJADOR CASCADE CONSTRAINTS ;

DROP TABLE VIAJE CASCADE CONSTRAINTS ;

CREATE TABLE CENTRO
  (
    Nombre        VARCHAR2 (33) NOT NULL ,
    Calle         VARCHAR2 (33) NOT NULL ,
    Numero        VARCHAR2 (4) NOT NULL ,
    Codigo_Postal VARCHAR2 (6) NOT NULL ,
    Telefono      VARCHAR2 (16) NOT NULL ,
    Ciudad        VARCHAR2 (33) NOT NULL ,
    Provincia     VARCHAR2 (20) NOT NULL ,
    CENTRO_ID     NUMBER (10) NOT NULL
  ) ;
ALTER TABLE CENTRO ADD CONSTRAINT CENTRO_PK PRIMARY KEY ( CENTRO_ID ) ;
ALTER TABLE CENTRO ADD CONSTRAINT CENTRO_Nombre_UN UNIQUE ( Nombre ) ;


CREATE TABLE TRABAJADOR
  (
    Usuario          VARCHAR2 (20) NOT NULL ,
    Contrasena       VARCHAR2 (20) NOT NULL ,
    Dni              VARCHAR2 (10) NOT NULL ,
    Nombre           VARCHAR2 (20) NOT NULL ,
    Apellido_1       VARCHAR2 (33) NOT NULL ,
    Apellido_2       VARCHAR2 (33) NOT NULL ,
    Calle            VARCHAR2 (33) NOT NULL ,
    Portal           VARCHAR2 (5) NOT NULL ,
    Piso             VARCHAR2 (4) ,
    Mano             VARCHAR2 (4) ,
    Categoria        VARCHAR2 (14) NOT NULL  CONSTRAINT TRAB_CAT_CK CHECK (CATEGORIA IN ('ADMINISTRATIVO', 'TRANSPORTISTA')),
	CENTRO_ID NUMBER (10),
	Telefono_Empresa VARCHAR2 (9) NOT NULL,
	Telefono_Personal VARCHAR2 (9),
	Salario NUMBER (8,2),
	Fecha_Nacimiento DATE NOT NULL

  ) ;
ALTER TABLE TRABAJADOR ADD CONSTRAINT TRABAJADOR_PK PRIMARY KEY ( Usuario ) ;


CREATE TABLE Avisos
  (
    Usuario VARCHAR2 (15) NOT NULL ,
    Fecha_Aviso        DATE DEFAULT SYSDATE ,
    Comentario         VARCHAR2 (200) NOT NULL
  ) ;





drop table parte;
CREATE TABLE PARTE
  ( Num_Parte	NUMBER (10) NOT NULL,
    Km_principio       NUMBER (8,2) NOT NULL ,
    Km_final           NUMBER (8,2) NOT NULL ,
    Fecha              DATE NOT NULL ,
    Estado             VARCHAR2 (9) NOT NULL  CONSTRAINT PAR_EST_CK CHECK (ESTADO IN ('ABIERTO', 'CERRADO')),
    Gasto_gasoil       NUMBER (8,2) ,
    Gasto_autopista    NUMBER (8,2) ,
    Gasto_dietas       NUMBER (8,2) ,
    Gastos_varios      NUMBER (8,2) ,
    Incidencias        VARCHAR2 (300) ,
    Validado            VARCHAR2 (4) NOT NULL CONSTRAINT PAR_VALID_CK CHECK (VALIDADO IN ('SI', 'NO')),
    TRABAJADOR_Usuario VARCHAR2 (20) NOT NULL,
	EXCESO NUMBER(8,2)
  ) ;
ALTER TABLE PARTE ADD CONSTRAINT PARTE_PK PRIMARY KEY ( Num_Parte ) ;
ALTER TABLE PARTE ADD CONSTRAINT PARTE_TRABAJADOR_FK FOREIGN KEY ( TRABAJADOR_Usuario ) REFERENCES TRABAJADOR ( Usuario ) ON DELETE SET NULL ;






CREATE TABLE VEHICULO
  (
    Matricula VARCHAR2 (12) NOT NULL ,
    Marca     VARCHAR2 (15) NOT NULL ,
    Modelo    VARCHAR2 (15)
  ) ;
ALTER TABLE VEHICULO ADD CONSTRAINT VEHICULO_PK PRIMARY KEY ( Matricula ) ;


CREATE TABLE VEHICULO_USUARIO
  (
    Usuario VARCHAR2 (20) NOT NULL ,
    Matricula_Vehiculo VARCHAR2 (12) NOT NULL
  ) ;
ALTER TABLE VEHICULO_USUARIO ADD CONSTRAINT VEHICULO_USUARIO_PK PRIMARY KEY ( TRABAJADOR_Usuario, VEHICULO_Matricula ) ;

CREATE TABLE VIAJE
  (
    Usuario          VARCHAR2 (20) NOT NULL ,
	Id_Viaje           NUMBER (10) PRIMARY KEY,
    Hora_salida        NUMBER(5,2) NOT NULL ,
    Hora_llegada       NUMBER(5,2) NOT NULL ,
    VEHICULO_Matricula VARCHAR2 (15) NOT NULL ,
    PARTE_Fecha        DATE NOT NULL ,
	HORAS_VIAJE NUMBER(8,2) DEFAULT NULL
  ) ;
  ALTER TABLE VIAJE ADD CONSTRAINT VIAJE_USUARIO_FK FOREIGN KEY ( USUARIO ) REFERENCES TRABAJADOR ( Usuario ) ;
ALTER TABLE VIAJE ADD CONSTRAINT VIAJE_VEHICULO_FK FOREIGN KEY ( VEHICULO_Matricula ) REFERENCES VEHICULO ( Matricula ) ;

  
--ALTER TABLE VIAJE ADD CONSTRAINT VIAJE_PK PRIMARY KEY ( Id_Viaje ) ;


ALTER TABLE Avisos ADD CONSTRAINT Avisos_TRABAJADOR_FK FOREIGN KEY ( TRABAJADOR_Usuario ) REFERENCES TRABAJADOR ( Usuario ) ;

ALTER TABLE VEHICULO_USUARIO ADD CONSTRAINT FK_VEHUSUA_USUAR FOREIGN KEY ( Usuario ) REFERENCES TRABAJADOR ( Usuario ) ON DELETE SET NULL;

ALTER TABLE VEHICULO_USUARIO ADD CONSTRAINT FK_VEHUSU_VEHIMATRIC FOREIGN KEY ( Matricula_Vehiculo ) REFERENCES VEHICULO ( Matricula )ON DELETE SET NULL ;


ALTER TABLE TRABAJADOR ADD CONSTRAINT TRABAJADOR_CENTRO_FK FOREIGN KEY ( CENTRO_CENTRO_ID ) REFERENCES CENTRO ( CENTRO_ID ) ON DELETE CASCADE ;

ALTER TABLE VIAJE ADD CONSTRAINT VIAJE_VEHICULO_FK FOREIGN KEY ( VEHICULO_Matricula ) REFERENCES VEHICULO ( Matricula ) ;

CREATE SEQUENCE CENTRO_CENTRO_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER CENTRO_CENTRO_ID_TRG BEFORE
  INSERT ON CENTRO FOR EACH ROW WHEN (NEW.CENTRO_ID IS NULL) BEGIN :NEW.CENTRO_ID := CENTRO_CENTRO_ID_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER Id_Viaje_TRG BEFORE
  INSERT ON VIAJE FOR EACH ROW WHEN (NEW.Id_Viaje IS NULL) BEGIN :NEW.Id_Viaje := SEQ_VIAJE.NEXTVAL;
END;
/
CREATE OR REPLACE TRIGGER NOMBRECENTRO_TRG BEFORE
  INSERT ON CENTRO FOR EACH ROW WHEN (NEW.CENTRO_ID IS NULL) BEGIN :NEW.CENTRO_ID := CENTRO_CENTRO_ID_SEQ.NEXTVAL;
END;

CREATE OR REPLACE TRIGGER NUM_PARTE_ID_TRG BEFORE
  INSERT ON PARTE FOR EACH ROW WHEN (NEW.NUM_PARTE IS NULL) BEGIN :NEW.NUM_PARTE := PARTE_SEQ.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER horas_viaje_TRG AFTER
  INSERT ON VIAJE FOR EACH ROW  WHEN (NEW. IS NULL) BEGIN :NEW.NUM_PARTE := PARTE_SEQ.NEXTVAL;
  END;
/

CREATE SEQUENCE SEQ_VIAJE

START WITH 1

MAXVALUE 9999999999

MINVALUE 1

NOCYCLE

NOCACHE

NOORDER

CREATE SEQUENCE CENTRO_ID_SEQ

START WITH 1

MAXVALUE 9999999999

MINVALUE 1

NOCYCLE

NOCACHE

NOORDER


CREATE SEQUENCE PARTE_SEQ

START WITH 1

MAXVALUE 9999999999

MINVALUE 1

NOCYCLE

NOCACHE

NOORDER





/* NO VALEN

createcreate or replace PROCEDURE LISPARTESPORRANGO
(FECHA1 IN PARTE.FECHA%TYPE, FECHA2 IN PARTE.FECHA%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT NUM_PARTE, TRABAJADOR_USUARIO, FECHA, ESTADO,  KM_PRINCIPIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO,  EXCESO  FROM PARTE
WHERE (PARTE.FECHA BETWEEN FECHA1 AND FECHA2);
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el parte');
WHEN OTHERS THEN raise_application_error (-20009, 'Error');
END LISPARTESPORRANGO;

create or replace PROCEDURE LISPARTESPORRANGOABIERTOS
(FECHA1 IN PARTE.FECHA%TYPE, FECHA2 IN PARTE.FECHA%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT NUM_PARTE, TRABAJADOR_USUARIO, FECHA, ESTADO,  KM_PRINCIPIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO,  EXCESO  FROM PARTE
WHERE (PARTE.FECHA BETWEEN FECHA1 AND FECHA2) AND PARTE.ESTADO = 'ABIERTO';
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el parte');
WHEN OTHERS THEN raise_application_error (-20009, 'Error');
END LISPARTESPORRANGOABIERTOS;

create or replace PROCEDURE LISPARTESPORRANGOCERRADOS
(FECHA1 IN PARTE.FECHA%TYPE, FECHA2 IN PARTE.FECHA%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT NUM_PARTE, TRABAJADOR_USUARIO, FECHA, ESTADO,  KM_PRINCIPIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO,  EXCESO  FROM PARTE
WHERE (PARTE.FECHA BETWEEN FECHA1 AND FECHA2) AND PARTE.ESTADO = 'CERRADO';
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el parte');
WHEN OTHERS THEN raise_application_error (-20009, 'Error');
END LISPARTESPORRANGOCERRADOS

create or replace PROCEDURE LISPARTESPORTRABAJADORYRANGO
(TRAB IN PARTE.TRABAJADOR_USUARIO%TYPE, FECHA1 IN PARTE.FECHA%TYPE, FECHA2 IN PARTE.FECHA%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT NUM_PARTE, TRABAJADOR_USUARIO, FECHA, ESTADO,  KM_PRINCIPIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO,  EXCESO  FROM PARTE
WHERE (PARTE.FECHA BETWEEN FECHA1 AND FECHA2) and PARTE.TRABAJADOR_USUARIO= TRAB;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el parte');
WHEN OTHERS THEN raise_application_error (-20009, 'Error');
END LISPARTESPORTRABAJADORYRANGO;

create or replace PROCEDURE LISPARTESTRABAJADORYRANGOABI
(TRAB IN PARTE.TRABAJADOR_USUARIO%TYPE, FECHA1 IN PARTE.FECHA%TYPE, FECHA2 IN PARTE.FECHA%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT NUM_PARTE, TRABAJADOR_USUARIO, FECHA, ESTADO,  KM_PRINCIPIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO,  EXCESO  FROM PARTE
WHERE (PARTE.FECHA BETWEEN FECHA1 AND FECHA2) and PARTE.TRABAJADOR_USUARIO= TRAB AND PARTE.ESTADO = 'ABIERTO';
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el parte');
WHEN OTHERS THEN raise_application_error (-20009, 'Error');
END LISPARTESTRABAJADORYRANGOABI;

create or replace PROCEDURE LISPARTESTRABAJADORYRANGOCER
(TRAB IN PARTE.TRABAJADOR_USUARIO%TYPE, FECHA1 IN PARTE.FECHA%TYPE, FECHA2 IN PARTE.FECHA%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT NUM_PARTE, TRABAJADOR_USUARIO, FECHA, ESTADO,  KM_PRINCIPIO, KM_FINAL, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO,  EXCESO  FROM PARTE
WHERE (PARTE.FECHA BETWEEN FECHA1 AND FECHA2) and PARTE.TRABAJADOR_USUARIO= TRAB AND PARTE.ESTADO = 'CERRADO';
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el parte');
WHEN OTHERS THEN raise_application_error (-20009, 'Error');
END LISPARTESTRABAJADORYRANGOCER;

create or replace procedure LISTACENTROS (LISTAC OUT SYS_REFCURSOR)
AS
VACIO EXCEPTION;
MAS_ERRORES EXCEPTION;
BEGIN
OPEN LISTAC FOR
SELECT * FROM CENTRO;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE VACIO;
WHEN OTHERS THEN RAISE MAS_ERRORES;
END LISTACENTROS;

create or replace procedure LISTAPARTESABIERTOS (LISTA OUT SYS_REFCURSOR)
AS
VACIO EXCEPTION;
MAS_ERRORES EXCEPTION;
BEGIN
OPEN LISTA FOR
SELECT NUM_PARTE, KM_PRINCIPIO, KM_FINAL, FECHA, ESTADO, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO, TRABAJADOR_USUARIO, EXCESO  FROM PARTE
WHERE ESTADO = 'ABIERTO'
ORDER BY TRABAJADOR_USUARIO, FECHA;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE VACIO;
WHEN OTHERS THEN RAISE MAS_ERRORES;
END LISTAPARTESABIERTOS;

create or replace procedure LISTAPARTESCERRADOS (LISTA OUT SYS_REFCURSOR)
AS
BEGIN
OPEN LISTA FOR
SELECT NUM_PARTE, KM_PRINCIPIO, KM_FINAL, FECHA, ESTADO, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO, TRABAJADOR_USUARIO, EXCESO  FROM PARTE
WHERE ESTADO = 'CERRADO'
ORDER BY TRABAJADOR_USUARIO, FECHA;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el trabajador');
WHEN TOO_MANY_ROWS THEN raise_application_error (-2008, 'Más de un resultado');
WHEN OTHERS THEN raise_application_error (-2009, 'Error');
END LISTAPARTESCERRADOS;

create or replace procedure LISTARPARTES (LISTA OUT SYS_REFCURSOR)
AS
VACIO EXCEPTION;
MAS_ERRORES EXCEPTION;
BEGIN
OPEN LISTA FOR
SELECT NUM_PARTE, KM_PRINCIPIO, KM_FINAL, FECHA, ESTADO, GASTO_GASOIL, GASTO_AUTOPISTA, 
GASTO_DIETAS, GASTOS_VARIOS, INCIDENCIAS, VALIDADO, TRABAJADOR_USUARIO, EXCESO  FROM PARTE
ORDER BY TRABAJADOR_USUARIO, FECHA;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE VACIO;
WHEN OTHERS THEN RAISE MAS_ERRORES;
END LISTARPARTES;

create or replace PROCEDURE LISTARUNCENTRO (  NOMBRE_CENTRO IN CENTRO.NOMBRE%TYPE, todo OUT sys_refcursor)
IS
VACIO EXCEPTION;
MAS_ERRORES EXCEPTION;  
BEGIN
open todo for
SELECT NOMBRE, CALLE, NUMERO, CODIGO_POSTAL, TELEFONO, CIUDAD, PROVINCIA, CENTRO_ID FROM CENTRO WHERE NOMBRE = NOMBRE_CENTRO;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE VACIO;
END LISTARUNCENTRO;

create or replace PROCEDURE LISTARUNTRABAJADOR ( dni_trabajador IN TRABAJADOR.DNI%TYPE, TODO OUT sys_refcursor)
IS  
BEGIN
open todo for
SELECT DNI, NOMBRE, APELLIDO_1, APELLIDO_2, CALLE, PORTAL, PISO, MANO, CATEGORIA, CENTRO_CENTRO_ID, TELEFONO_EMPRESA, TELEFONO_PERSONAL, SALARIO, FECHA_NACIMIENTO
FROM TRABAJADOR WHERE DNI = dni_trabajador;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE_APPLICATION_ERROR (-20007, 'No existe el trabajador');
WHEN TOO_MANY_ROWS THEN raise_application_error (-2008, 'Más de un resultado');
WHEN OTHERS THEN raise_application_error (-2009, 'Error');
END LISTARUNTRABAJADOR;

create or replace procedure LISTATRABAJADORES (LISTA OUT SYS_REFCURSOR)
AS
VACIO EXCEPTION;
MAS_ERRORES EXCEPTION;
BEGIN
OPEN LISTA FOR
SELECT * FROM TRABAJADOR;
EXCEPTION
WHEN NO_DATA_FOUND THEN RAISE VACIO;
WHEN OTHERS THEN RAISE MAS_ERRORES;
END LISTATRABAJADORES;

     */